version: '3.8'

services:
  database:
    image: mysql:8.0.27
    container_name: database
    networks:
      abc_network:
        ipv4_address: 172.20.0.10

    environment:
      DATABASE_PORT: 3306
      MYSQL_ROOT_PASSWORD: "*8MA1SW#RI@%"
      MYSQL_DATABASE: ABC_Database

  eureka:
    container_name: eureka
    image: vinul16/eureka-service:1.0.0
    build:
      context: ./Discovery
      dockerfile: Dockerfile
    networks: # define ip address in subnet range
      abc_network:
        ipv4_address: 172.20.0.11


  common-service: #backEnd container
    container_name: common-service
    image: vinul16/common-service:1.0.0
    build:
      context: ./Common
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      JAVA_OPTS: "-Xms256m -Xmx512m -DEUREKA_SERVER=http://eureka:8761/eureka"
    networks: # define ip address in subnet range
      abc_network:
        ipv4_address: 172.20.0.12

    depends_on:
      - eureka


  gateway-service:
    container_name: gateway-service
    image: vinul16/gateway-service:1.0.0
    build:
      context: ./Gateway
      dockerfile: Dockerfile
    restart: unless-stopped
    networks: # define ip address in subnet range
      abc_network:
        ipv4_address: 172.20.0.13
    environment:
      JAVA_OPTS: "-Xms256m -Xmx512m -DEUREKA_SERVER=http://eureka:8761/eureka"
    depends_on:
      - eureka


  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    restart: unless-stopped
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      abc_network:
        ipv4_address: 172.20.0.20

  
  kafka:
    container_name: kafka
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
#    environment:
#      - KAFKA_BROKER_ID=1                     # ✅ Enables Zookeeper mode
#      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 # ✅ Use the container name, not IP (Docker internal DNS resolves this)
#      - KAFKA_LISTENERS=PLAINTEXT://:9092
#      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
#      - ALLOW_PLAINTEXT_LISTENER=yes
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    depends_on:
      - zookeeper
    networks:
      abc_network:
        ipv4_address: 172.20.0.17


  inventory-service:
    container_name: inventory-service
    image: vinul16/inventory-service:1.0.0
    build:
      context: ./Inventory
      dockerfile: Dockerfile
    restart: unless-stopped
    networks: # define ip address in subnet range
      abc_network:
        ipv4_address: 172.20.0.14

    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://database:3306/ABC_Database?createDatabaseIfNotExist=true
      JAVA_OPTS: "-Xms256m -Xmx512m -DEUREKA_SERVER=http://eureka:8761/eureka"

    depends_on:
      - eureka
      - gateway-service
      - database
      - kafka

  order-service:
    container_name: order-service
    image: vinul16/order-service:1.0.0
    build:
      context: ./Order
      dockerfile: Dockerfile
    restart: unless-stopped
    networks: # define ip address in subnet range
      abc_network:
        ipv4_address: 172.20.0.15

    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://database:3306/ABC_Database?createDatabaseIfNotExist=true
      JAVA_OPTS: "-Xms256m -Xmx512m -DEUREKA_SERVER=http://eureka:8761/eureka"

    depends_on:
      - eureka
      - gateway-service
      - database
      - kafka
      - common-service


  product-service:
    container_name: product-service
    image: vinul16/product-service:1.0.0
    build:
      context: ./Product
      dockerfile: Dockerfile
    restart: unless-stopped
    networks: # define ip address in subnet range
      abc_network:
        ipv4_address: 172.20.0.16

    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://database:3306/ABC_Database?createDatabaseIfNotExist=true
      JAVA_OPTS: "-Xms256m -Xmx512m -DEUREKA_SERVER=http://eureka:8761/eureka"

    depends_on:
      - eureka
      - gateway-service
      - database

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.55.1
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9090" ]
    networks: # define ip address in subnet range
      abc_network:
        ipv4_address: 172.20.0.18

#  grafana:
#      container_name: grafana
#      image: grafana/grafana:11.3.0
#      restart: unless-stopped
#      ports:
#        - ":3000"
#      environment:
#        - GF_USERS_ALLOW_SIGN_UP=false
#      volumes:
#        - ./grafana/provisioning:/etc/grafana/provisioning
#      depends_on:
#        - prometheus
#      healthcheck:
#        test: [ "CMD", "nc", "-z", "localhost", "3000" ]
#      networks: # define ip address in subnet range
#        abc_network:
#          ipv4_address: 172.20.0.19

networks:
  abc_network:
    driver: bridge
    name: abc_network
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
