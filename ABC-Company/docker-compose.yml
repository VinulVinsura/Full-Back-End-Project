version: '3.8'

services:
  database:
    image: mysql:8.0.27
    container_name: database
    environment:
      MYSQL_ROOT_PASSWORD: "*8MA1SW#RI@%"
      MYSQL_DATABASE: ABC_Database
#    ports:
#      - "3306:3306"
    networks:
      - abc_network

  eureka:
    build:
      context: ./Discovery
      dockerfile: Dockerfile
    image: vinul16/eureka-service:1.0.0
    container_name: eureka
    restart: unless-stopped
    ports:
      - "8761:8761"
    networks:
      - abc_network

  common-service:
    build:
      context: ./Common
      dockerfile: Dockerfile
    image: vinul16/common-service:1.0.0
    container_name: common-service
    restart: unless-stopped
    depends_on:
      - eureka
    ports:
      - "8080:8080"
    networks:
      - abc_network

  gateway-service:
    build:
      context: ./Gateway
      dockerfile: Dockerfile
    image: vinul16/gateway-service:1.0.0
    container_name: gateway-service
    restart: unless-stopped
    depends_on:
      - eureka
    ports:
      - "8083:8083"
    networks:
      - abc_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - abc_network

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - abc_network

  inventory-service:
    build:
      context: ./Inventory
      dockerfile: Dockerfile
    image: vinul16/inventory-service:1.0.0
    container_name: inventory-service
    restart: unless-stopped
    depends_on:
      - eureka
      - gateway-service
      - database
      - kafka
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://database:3306/ABC_Database?createDatabaseIfNotExist=true
    networks:
      - abc_network

  order-service:
    build:
      context: ./Order
      dockerfile: Dockerfile
    image: vinul16/order-service:1.0.0
    container_name: order-service
    restart: unless-stopped
    depends_on:
      - eureka
      - gateway-service
      - database
      - kafka
      - common-service
    ports:
      - "8084:8084"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://database:3306/ABC_Database?createDatabaseIfNotExist=true
    networks:
      - abc_network

  product-service:
    build:
      context: ./Product
      dockerfile: Dockerfile
    image: vinul16/product-service:1.0.0
    container_name: product-service
    restart: unless-stopped
    depends_on:
      - eureka
      - gateway-service
      - database
    ports:
      - "8085:8085"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://database:3306/ABC_Database?createDatabaseIfNotExist=true
    networks:
      - abc_network

  prometheus:
    image: prom/prometheus:v2.55.1
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9090"]
    networks:
      - abc_network
#        ipv4_address: 172.20.0.10

#  grafana:
#    container_name: grafana
#    image: grafana/grafana:11.3.0
#    restart: unless-stopped
#    ports:
#      - "3000:3000"
#    environment:
#      - GF_USERS_ALLOW_SIGN_UP=false
#    volumes:
#      - ./grafana/provisioning:/etc/grafana/provisioning
#    depends_on:
#      - prometheus
#    healthcheck:
#      test: ["CMD", "nc", "-z", "localhost", "3000"]
#    networks:
#      abc_network:
#        ipv4_address: 172.20.0.19

networks:
  abc_network:
    driver: bridge
    name: abc_network
#    ipam:
#      config:
#        - subnet: 172.20.0.0/16
#          gateway: 172.20.0.1
